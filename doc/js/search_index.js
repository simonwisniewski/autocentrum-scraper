var search_data = {"index":{"searchIndex":["car","filemanager","httpartyhandler","main","nokogirihandler","reportgenerator","scraper","add_car()","adjust_delay_based_on_response()","car_already_loaded?()","car_with_most_features()","check_and_load_existing_report()","colorize()","fetch_and_parse_sitemap()","generate_report()","generate_report()","get()","html()","new()","new()","new()","new()","print_url()","process_link()","read_cars_from_file()","read_from_file()","scrap()","scrap()","sleep_until_next_allowed_request()","write_to_file()","gemfile","gemfile.lock","httparty_handler.log","main.log"],"longSearchIndex":["car","filemanager","httpartyhandler","main","nokogirihandler","reportgenerator","scraper","main#add_car()","httpartyhandler::adjust_delay_based_on_response()","main#car_already_loaded?()","reportgenerator::car_with_most_features()","main#check_and_load_existing_report()","reportgenerator#colorize()","main#fetch_and_parse_sitemap()","main#generate_report()","reportgenerator#generate_report()","httpartyhandler::get()","nokogirihandler::html()","car::new()","main::new()","reportgenerator::new()","scraper::new()","car#print_url()","main#process_link()","reportgenerator::read_cars_from_file()","filemanager#read_from_file()","main#scrap()","scraper#scrap()","httpartyhandler::sleep_until_next_allowed_request()","filemanager::write_to_file()","","","",""],"info":[["Car","","Car.html","","<p>Car class is responsible for creating a Car object with features. It initializes the object with a hash …\n"],["FileManager","","FileManager.html","","<p>FileManager module\n"],["HttpartyHandler","","HttpartyHandler.html","","<p>HttpartyHandler class is responsible for handling HTTP requests with retry logic, rate limiting, and …\n"],["Main","","Main.html","","<p>The Main class orchestrates the scraping process. It fetches URLs from a sitemap, processes each link …\n"],["NokogiriHandler","","NokogiriHandler.html","","\n<pre>NokogiriHandler class</pre>\n<p>This class handles the Nokogiri requests It has a class method to parse the HTML …\n"],["ReportGenerator","","ReportGenerator.html","","<p>The ReportGenerator class is responsible for generating a report from car data, extracting links from …\n"],["Scraper","","Scraper.html","","\n<pre>Scraper class</pre>\n<p>This class scrapes the data from the website It has a method to scrape the data\n"],["add_car","Main","Main.html#method-i-add_car","(version_or_engine_data)","<p>Adds a car’s data by scraping the given URL.\n<p>It scrapes the data, creates a Car object, and adds it …\n"],["adjust_delay_based_on_response","HttpartyHandler","HttpartyHandler.html#method-c-adjust_delay_based_on_response","(response)","<p>Adjusts the rate limiting delay based on the HTTP response code.\n<p>If the response code is 429 (Too Many …\n"],["car_already_loaded?","Main","Main.html#method-i-car_already_loaded-3F","(link)","<p>Checks if the car data for a given link is already loaded.\n<p>@param [String] link The URL to check. @return …\n"],["car_with_most_features","ReportGenerator","ReportGenerator.html#method-c-car_with_most_features","(cars)","<p>Finds the car with the most features.\n<p>@param [Array&lt;Car&gt;] cars An array of Car objects. @return …\n"],["check_and_load_existing_report","Main","Main.html#method-i-check_and_load_existing_report","()","<p>Checks for an existing report file and loads the car data if it exists.\n<p>If the report file is found, it …\n"],["colorize","ReportGenerator","ReportGenerator.html#method-i-colorize","(text, color_code)","<p>Colorizes the given text with the specified color code.\n<p>@param [String] text The text to colorize. @param …\n"],["fetch_and_parse_sitemap","Main","Main.html#method-i-fetch_and_parse_sitemap","()","<p>Fetches and parses the sitemap to extract all car-related URLs.\n<p>It fetches the sitemap from the given …\n"],["generate_report","Main","Main.html#method-i-generate_report","()","<p>Generates a report with the collected car data.\n<p>If no cars have been collected, it prints a message indicating …\n"],["generate_report","ReportGenerator","ReportGenerator.html#method-i-generate_report","(cars)","<p>Generates a report from the given cars and saves it to a CSV file.\n<p>The headers of the CSV file are based …\n"],["get","HttpartyHandler","HttpartyHandler.html#method-c-get","(url)","<p>Makes a GET request to the given URL with retry logic and rate limiting.\n<p>@param [String] url The URL to …\n"],["html","NokogiriHandler","NokogiriHandler.html#method-c-html","(body, sel, at = '')","\n<pre class=\"ruby\"><span class=\"ruby-constant\">HTML</span> <span class=\"ruby-identifier\">method</span>\n</pre>\n<p>This method parses the HTML It takes the body, selector, and an optional attribute It returns …\n"],["new","Car","Car.html#method-c-new","(attributes)","<p>Initializes the Car object with a hash of attributes.\n<p>@param [Hash] attributes A hash of attributes to …\n"],["new","Main","Main.html#method-c-new","()","<p>Initializes a new Main object.\n<p>Sets up the initial state, including loading existing report data if available, …\n"],["new","ReportGenerator","ReportGenerator.html#method-c-new","(file_name, encoding: 'utf-8')","<p>Initializes the ReportGenerator object with a file name.\n<p>@param [String] file_name The name of the file …\n"],["new","Scraper","Scraper.html#method-c-new","(link)","\n<pre class=\"ruby\"><span class=\"ruby-constant\">Initialize</span> <span class=\"ruby-identifier\">method</span>\n</pre>\n<p>This method initializes the Scraper object with a base link and an optional path\n"],["print_url","Car","Car.html#method-i-print_url","()","<p>Prints the URL of the car.\n<p>@return [String] The URL of the car.\n"],["process_link","Main","Main.html#method-i-process_link","(link)","<p>Processes a single link by checking if the car data is already loaded.\n<p>If the car data is not already …\n"],["read_cars_from_file","ReportGenerator","ReportGenerator.html#method-c-read_cars_from_file","(file_name)","<p>Reads cars from an existing CSV file.\n<p>@param [String] file_name The name of the file to read cars from. …\n"],["read_from_file","FileManager","FileManager.html#method-i-read_from_file","(file_name)","\n<pre class=\"ruby\"><span class=\"ruby-constant\">Read</span> <span class=\"ruby-identifier\">from</span> <span class=\"ruby-identifier\">file</span> <span class=\"ruby-identifier\">method</span>\n</pre>\n<p>Reads the data from the file\n"],["scrap","Main","Main.html#method-i-scrap","()","<p>Starts the scraping process by processing each link from the sitemap.\n<p>It uses a thread pool to handle …\n"],["scrap","Scraper","Scraper.html#method-i-scrap","()","\n<pre class=\"ruby\"><span class=\"ruby-constant\">Scrap</span> <span class=\"ruby-identifier\">method</span>\n</pre>\n<p>This method scrapes the data from the website It makes a GET request to the URL using the …\n"],["sleep_until_next_allowed_request","HttpartyHandler","HttpartyHandler.html#method-c-sleep_until_next_allowed_request","()","<p>Sleeps until the next request is allowed based on the rate limiting delay.\n"],["write_to_file","FileManager","FileManager.html#method-c-write_to_file","(file_name, data)","\n<pre class=\"ruby\"><span class=\"ruby-constant\">Write</span> <span class=\"ruby-identifier\">to</span> <span class=\"ruby-identifier\">file</span> <span class=\"ruby-identifier\">method</span>\n</pre>\n<p>Writes the data to the file\n"],["Gemfile","","Gemfile.html","","<p># frozen_string_literal: true\n<p>source ‘rubygems.org’\n<p># gem “rails”\n"],["Gemfile.lock","","Gemfile_lock.html","","<p>GEM\n\n<pre>remote: https://rubygems.org/\nspecs:\n  ast (2.4.2)\n  bigdecimal (3.1.8)\n  concurrent-ruby (1.3.3) ...</pre>\n"],["httparty_handler.log","","httparty_handler_log.html","","<p># Logfile created on 2024-07-30 10:32:00 +0000 by logger.rb/v1.6.0\n"],["main.log","","main_log.html","","<p># Logfile created on 2024-07-30 10:32:00 +0000 by logger.rb/v1.6.0 I, [2024-07-30T10:32:04.455047 #90340] …\n"]]}}